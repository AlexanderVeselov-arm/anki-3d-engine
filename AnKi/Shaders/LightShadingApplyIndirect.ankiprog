// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki start vert
#include <AnKi/Shaders/QuadVert.glsl>
#pragma anki end

#pragma anki start frag
#include <AnKi/Shaders/BilateralFilter.glsl>
#include <AnKi/Shaders/PackFunctions.glsl>

layout(set = 0, binding = 0) uniform sampler u_nearestAnyClampSampler;
layout(set = 0, binding = 1) uniform sampler u_linearAnyClampSampler;
layout(set = 0, binding = 2) uniform ANKI_RP texture2D u_quarterDiffuseIndirectTex;
layout(set = 0, binding = 3) uniform ANKI_RP texture2D u_quarterSpecularIndirectTex;
layout(set = 0, binding = 4) uniform texture2D u_quarterDepthTex;
layout(set = 0, binding = 5) uniform texture2D u_fullDepthTex;
layout(set = 0, binding = 6) uniform ANKI_RP texture2D u_gbuffer0Tex;
layout(set = 0, binding = 7) uniform ANKI_RP texture2D u_gbuffer1Tex;
layout(set = 0, binding = 8) uniform ANKI_RP texture2D u_gbuffer2Tex;
layout(set = 0, binding = 9) uniform ANKI_RP texture2D u_integrationLut;

#define CLUSTERED_SHADING_SET 0u
#define CLUSTERED_SHADING_UNIFORMS_BINDING 10u
#include <AnKi/Shaders/ClusteredShadingCommon.glsl>

layout(push_constant, std140) uniform b_pc
{
	F32 u_near;
	F32 u_far;
	F32 u_padding0;
	F32 u_padding1;
};

layout(location = 0) in Vec2 in_uv;
layout(location = 0) out ANKI_RP Vec3 out_color;

void main()
{
	// GBuffer
	GbufferInfo gbuffer;
	unpackGBufferNoVelocity(textureLod(u_gbuffer0Tex, u_nearestAnyClampSampler, in_uv, 0.0),
							textureLod(u_gbuffer1Tex, u_nearestAnyClampSampler, in_uv, 0.0),
							textureLod(u_gbuffer2Tex, u_nearestAnyClampSampler, in_uv, 0.0), gbuffer);

	// Reference
	const F32 depthCenter = textureLod(u_fullDepthTex, u_nearestAnyClampSampler, in_uv, 0.0).x;
	if(depthCenter == 1.0)
	{
		discard;
	}

	const F32 linearDepthCenter = linearizeDepth(depthCenter, u_near, u_far);

	// Quad depths
	Vec4 quarterDepths = textureGather(sampler2D(u_quarterDepthTex, u_nearestAnyClampSampler), in_uv, 0);
	quarterDepths = linearizeDepth(quarterDepths, u_near, u_far);

	// Diff
	const Vec4 diffs = abs(quarterDepths - linearDepthCenter);
	const F32 maxDiff = max(diffs.x, max(diffs.y, max(diffs.z, diffs.w)));

	const F32 depthThreshold = 0.2 / (u_far - u_near);

	// Do a neareset depth upscale
	ANKI_RP Vec3 diffuse = Vec3(0.0);
	ANKI_RP Vec3 specular = Vec3(0.0);
	if(maxDiff <= depthThreshold)
	{
		diffuse = textureLod(u_quarterDiffuseIndirectTex, u_linearAnyClampSampler, in_uv, 0.0).xyz;
		specular = textureLod(u_quarterSpecularIndirectTex, u_linearAnyClampSampler, in_uv, 0.0).xyz;
	}
	else
	{
		// Some discontinuites, need to pick the one closest to depth reference

		const ANKI_RP Vec4 diffuseR =
			textureGather(sampler2D(u_quarterDiffuseIndirectTex, u_linearAnyClampSampler), in_uv, 0);
		const ANKI_RP Vec4 diffuseG =
			textureGather(sampler2D(u_quarterDiffuseIndirectTex, u_linearAnyClampSampler), in_uv, 1);
		const ANKI_RP Vec4 diffuseB =
			textureGather(sampler2D(u_quarterDiffuseIndirectTex, u_linearAnyClampSampler), in_uv, 2);

		const ANKI_RP Vec4 specularR =
			textureGather(sampler2D(u_quarterSpecularIndirectTex, u_linearAnyClampSampler), in_uv, 0);
		const ANKI_RP Vec4 specularG =
			textureGather(sampler2D(u_quarterSpecularIndirectTex, u_linearAnyClampSampler), in_uv, 1);
		const ANKI_RP Vec4 specularB =
			textureGather(sampler2D(u_quarterSpecularIndirectTex, u_linearAnyClampSampler), in_uv, 2);

		F32 minDiff = diffs.x;
		U32 comp = 0u;

		if(diffs.y < minDiff)
		{
			comp = 1u;
			minDiff = diffs.y;
		}

		if(diffs.z < minDiff)
		{
			comp = 2u;
			minDiff = diffs.z;
		}

		diffuse = Vec3(diffuseR[comp], diffuseG[comp], diffuseB[comp]);
		specular = Vec3(specularR[comp], specularG[comp], specularB[comp]);
	}

	// Do diffuse
	diffuse *= gbuffer.m_diffuse;

	// Do specular
	if(false)
	{
		const Vec2 ndc = UV_TO_NDC(in_uv);
		const Vec4 worldPos4 = u_clusteredShading.m_matrices.m_invertedViewProjectionJitter * Vec4(ndc, depthCenter, 1.0);
		const Vec3 worldPos = worldPos4.xyz / worldPos4.w;
		const ANKI_RP Vec3 viewDir = normalize(u_clusteredShading.m_cameraPosition - worldPos);
		const F32 NoV = max(0.0, dot(gbuffer.m_normal, viewDir));
		const Vec3 env = specularDFG(gbuffer.m_f0, gbuffer.m_roughness, u_integrationLut, u_linearAnyClampSampler, NoV);
		specular *= env;
	}

	// Writeout
	out_color = saturateRp(diffuse + specular);
}
#pragma anki end
